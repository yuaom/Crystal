#pragma once

EXTERN_C NTSTATUS APIENTRY D3DKMTCreateDevice( D3DKMT_CREATEDEVICE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenAdapterFromGdiDisplayName( D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenAdapterFromDeviceName( D3DKMT_OPENADAPTERFROMDEVICENAME* );
EXTERN_C NTSTATUS APIENTRY D3DKMTQueryAdapterInfo( CONST D3DKMT_QUERYADAPTERINFO* );
EXTERN_C NTSTATUS APIENTRY D3DKMTAcquireKeyedMutex( D3DKMT_ACQUIREKEYEDMUTEX* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCloseAdapter( CONST D3DKMT_CLOSEADAPTER* );
EXTERN_C NTSTATUS APIENTRY D3DKMTConfigureSharedResource( CONST D3DKMT_CONFIGURESHAREDRESOURCE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateAllocation( D3DKMT_CREATEALLOCATION* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateAllocation2( D3DKMT_CREATEALLOCATION* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateContext( D3DKMT_CREATECONTEXT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateKeyedMutex( D3DKMT_CREATEKEYEDMUTEX* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateSynchronizationObject( D3DKMT_CREATESYNCHRONIZATIONOBJECT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTCreateSynchronizationObject2( D3DKMT_CREATESYNCHRONIZATIONOBJECT2* );
EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyAllocation( CONST D3DKMT_DESTROYALLOCATION* );
EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyContext( CONST D3DKMT_DESTROYCONTEXT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyDevice( CONST D3DKMT_DESTROYDEVICE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTDestroyKeyedMutex( CONST D3DKMT_DESTROYKEYEDMUTEX* );
EXTERN_C NTSTATUS APIENTRY D3DKMTDestroySynchronizationObject( CONST D3DKMT_DESTROYSYNCHRONIZATIONOBJECT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTEscape( CONST D3DKMT_ESCAPE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetContextSchedulingPriority( D3DKMT_GETCONTEXTSCHEDULINGPRIORITY* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetDeviceState( D3DKMT_GETDEVICESTATE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetDisplayModeList( D3DKMT_GETDISPLAYMODELIST* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetMultisampleMethodList( D3DKMT_GETMULTISAMPLEMETHODLIST* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetRuntimeData( CONST D3DKMT_GETRUNTIMEDATA* );
EXTERN_C NTSTATUS APIENTRY D3DKMTGetSharedPrimaryHandle( D3DKMT_GETSHAREDPRIMARYHANDLE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTLock( D3DKMT_LOCK* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenKeyedMutex( D3DKMT_OPENKEYEDMUTEX* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenResource( D3DKMT_OPENRESOURCE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenResource2( D3DKMT_OPENRESOURCE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTOpenSynchronizationObject( D3DKMT_OPENSYNCHRONIZATIONOBJECT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTPresent( D3DKMT_PRESENT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTQueryAllocationResidency( CONST D3DKMT_QUERYALLOCATIONRESIDENCY* );
EXTERN_C NTSTATUS APIENTRY D3DKMTQueryResourceInfo( D3DKMT_QUERYRESOURCEINFO* );
EXTERN_C NTSTATUS APIENTRY D3DKMTReleaseKeyedMutex( D3DKMT_RELEASEKEYEDMUTEX* );
EXTERN_C NTSTATUS APIENTRY D3DKMTRender( D3DKMT_RENDER* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetAllocationPriority( CONST D3DKMT_SETALLOCATIONPRIORITY* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetContextSchedulingPriority( CONST D3DKMT_SETCONTEXTSCHEDULINGPRIORITY* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetDisplayMode( CONST D3DKMT_SETDISPLAYMODE* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetDisplayPrivateDriverFormat( CONST D3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetGammaRamp( CONST D3DKMT_SETGAMMARAMP* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSetVidPnSourceOwner( CONST D3DKMT_SETVIDPNSOURCEOWNER* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSignalSynchronizationObject( CONST D3DKMT_SIGNALSYNCHRONIZATIONOBJECT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTSignalSynchronizationObject2( CONST D3DKMT_SIGNALSYNCHRONIZATIONOBJECT2* );
EXTERN_C NTSTATUS APIENTRY D3DKMTUnlock( CONST D3DKMT_UNLOCK* );
EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForSynchronizationObject( CONST D3DKMT_WAITFORSYNCHRONIZATIONOBJECT* );
EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForSynchronizationObject2( CONST D3DKMT_WAITFORSYNCHRONIZATIONOBJECT2* );
EXTERN_C NTSTATUS APIENTRY D3DKMTWaitForVerticalBlankEvent( CONST D3DKMT_WAITFORVERTICALBLANKEVENT* );